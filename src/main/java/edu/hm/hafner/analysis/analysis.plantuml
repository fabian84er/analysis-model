@startuml

title __ANALYSIS's Class Diagram__\n

  namespace edu.hm.hafner {
    namespace analysis {
      abstract class edu.hm.hafner.analysis.AbstractPackageDetector {
          + detectPackageName()
          ~ AbstractPackageDetector()
          {abstract} ~ accepts()
          ~ detectPackageName()
          {abstract} ~ detectPackageName()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.CSharpNamespaceDetector {
          {static} - NAMESPACE_PATTERN : Pattern
          + accepts()
          + detectPackageName()
          ~ CSharpNamespaceDetector()
          ~ CSharpNamespaceDetector()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Categories {
          {static} + DEPRECATION : String
          {static} + JAVADOC : String
          {static} + OTHER : String
          {static} + PROPRIETARY_API : String
          {static} + guessCategory()
          {static} + guessCategoryIfEmpty()
          - Categories()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.DuplicationGroup {
          - codeFragment : String
          - occurrences : List<Issue>
          {static} - serialVersionUID : long
          + DuplicationGroup()
          + DuplicationGroup()
          + add()
          + equals()
          + getCodeFragment()
          + getDuplications()
          + hashCode()
          + setCodeFragment()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FileNameResolver {
          {static} ~ NOTHING_TO_DO : String
          {static} - PATH_UTIL : PathUtil
          + run()
          - isInterestingFileName()
          - makeRelative()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FileReaderFactory {
          - charset : Charset
          - file : Path
          - fileName : String
          - isCharsetUndetected : boolean
          + FileReaderFactory()
          + FileReaderFactory()
          + create()
          + getCharset()
          + getFileName()
          - detectCharset()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FilteredLog {
          {static} - DEFAULT_MAX_LINES : int
          {static} - SKIPPED_MESSAGE : String
          - lines : int
          - maxLines : int
          - title : String
          + FilteredLog()
          + FilteredLog()
          + logError()
          + logException()
          + logInfo()
          + logSummary()
          + size()
          - printTitle()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FingerprintGenerator {
          + run()
          {static} ~ createDefaultFingerprint()
          - computeFingerprint()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FullTextFingerprint {
          {static} - HEX_CHARACTERS : char[]
          {static} - LINES_LOOK_AHEAD : int
          {static} - LINE_RANGE_BUFFER_SIZE : int
          - digest : MessageDigest
          + FullTextFingerprint()
          + compute()
          ~ FullTextFingerprint()
          ~ createFingerprint()
          ~ extractContext()
          ~ getFallbackFingerprint()
          - asHex()
          - computeStartLine()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.FullTextFingerprint.FileSystem {
          ~ readLinesFromFile()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Issue {
          {static} ~ UNDEFINED : String
          {static} - PATH_UTIL : PathUtil
          - additionalProperties : Serializable
          - category : String
          - columnEnd : int
          - columnStart : int
          - description : String
          - fileName : TreeString
          - fingerprint : String
          - id : UUID
          - lineEnd : int
          - lineStart : int
          - message : TreeString
          - moduleName : String
          - origin : String
          - packageName : TreeString
          - pathName : String
          - reference : String
          {static} - serialVersionUID : long
          - type : String
          {static} + byCategory()
          {static} + byFileName()
          {static} + byFolder()
          {static} + byModuleName()
          {static} + byOrigin()
          {static} + byPackageName()
          {static} + bySeverity()
          {static} + byType()
          + equals()
          + getAbsolutePath()
          + getAdditionalProperties()
          + getBaseName()
          + getCategory()
          + getColumnEnd()
          + getColumnStart()
          + getDescription()
          + getFileName()
          + getFingerprint()
          + getFolder()
          + getId()
          + getLineEnd()
          + getLineRanges()
          + getLineStart()
          + getMessage()
          + getModuleName()
          + getOrigin()
          + getPackageName()
          + getPath()
          {static} + getPropertyValueAsString()
          {static} + getPropertyValueGetter()
          + getReference()
          + getSeverity()
          + getType()
          + hasFileName()
          + hasFingerprint()
          + hasModuleName()
          + hasPackageName()
          + hashCode()
          + setOrigin()
          + setReference()
          + toString()
          # readResolve()
          ~ Issue()
          ~ Issue()
          ~ Issue()
          ~ getFileNameTreeString()
          ~ getMessageTreeString()
          ~ getPackageNameTreeString()
          ~ setFileName()
          ~ setFingerprint()
          ~ setModuleName()
          ~ setPackageName()
          - defaultInteger()
          - defaultString()
          - normalizeFileName()
          - stripToEmpty()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.IssueBuilder {
          {static} - EMPTY : String
          {static} - EMPTY_TREE_STRING : TreeString
          {static} - UNDEFINED : String
          {static} - UNDEFINED_TREE_STRING : TreeString
          - additionalProperties : Serializable
          - category : String
          - columnEnd : int
          - columnStart : int
          - description : String
          - directory : String
          - fileName : TreeString
          - fileNameBuilder : TreeStringBuilder
          - fingerprint : String
          - id : UUID
          - lineEnd : int
          - lineStart : int
          - message : TreeString
          - messageBuilder : TreeStringBuilder
          - moduleName : String
          - origin : String
          - packageName : TreeString
          - packageNameBuilder : TreeStringBuilder
          - pathName : String
          - reference : String
          - type : String
          + build()
          + buildOptional()
          + copy()
          + guessSeverity()
          + setAdditionalProperties()
          + setCategory()
          + setColumnEnd()
          + setColumnEnd()
          + setColumnStart()
          + setColumnStart()
          + setDescription()
          + setDirectory()
          + setFileName()
          + setFingerprint()
          + setId()
          + setLineEnd()
          + setLineEnd()
          + setLineRanges()
          + setLineStart()
          + setLineStart()
          + setMessage()
          + setModuleName()
          + setOrigin()
          + setPackageName()
          + setPathName()
          + setReference()
          + setSeverity()
          + setType()
          ~ internFileName()
          ~ internPackageName()
          {static} - defaultString()
          {static} - normalizeFileName()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.IssueDifference {
          + IssueDifference()
          + getFixedIssues()
          + getNewIssues()
          + getOutstandingIssues()
          - findReferenceByEquals()
          - findReferenceByFingerprint()
          - matchIssuesByEquals()
          - matchIssuesByFingerprint()
          - remove()
          - selectIssueWithSameFingerprint()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      abstract class edu.hm.hafner.analysis.IssueParser {
          {static} - serialVersionUID : long
          + accepts()
          {abstract} + parse()
          # isXmlFile()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.JavaPackageDetector {
          {static} - PACKAGE_PATTERN : Pattern
          + accepts()
          + detectPackageName()
          ~ JavaPackageDetector()
          ~ JavaPackageDetector()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.LineRange {
          - end : int
          {static} - serialVersionUID : long
          - start : int
          + LineRange()
          + LineRange()
          + equals()
          + getEnd()
          + getStart()
          + hashCode()
          + toString()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.LineRangeList {
          {static} - DEFAULT_CAPACITY : int
          - data : byte[]
          - len : int
          {static} - serialVersionUID : long
          + LineRangeList()
          + LineRangeList()
          + LineRangeList()
          + LineRangeList()
          + add()
          + add()
          + addAll()
          + addAll()
          + clear()
          + contains()
          + get()
          + iterator()
          + listIterator()
          + listIterator()
          + remove()
          + set()
          + size()
          + trim()
          - ensure()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.LineRangeList.Cursor {
          - position : int
          + add()
          + compare()
          + copy()
          + delete()
          + hasNext()
          + hasPrevious()
          + next()
          + nextIndex()
          + previous()
          + previousIndex()
          + remove()
          + rewrite()
          + set()
          ~ Cursor()
          ~ Cursor()
          - adjust()
          - count()
          - prev()
          - read()
          - sizeOf()
          - sizeOf()
          - skip()
          - write()
          - write()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      abstract class edu.hm.hafner.analysis.LookaheadParser {
          {static} # ANT_TASK : String
          {static} - CMAKE_PATH : Pattern
          {static} - CMAKE_PREFIX : String
          {static} - ENTERING_DIRECTORY : String
          {static} - MAKE_PATH : Pattern
          - pattern : Pattern
          {static} - serialVersionUID : long
          + parse()
          # LookaheadParser()
          {abstract} # createIssue()
          # isLineInteresting()
          # postProcess()
          - extractAndStoreDirectory()
          - parse()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.ModuleDetector {
          {static} ~ ANT_PROJECT : String
          {static} ~ BUILD_GRADLE : String
          {static} ~ BUILD_GRADLE_KTS : String
          {static} ~ BUNDLE_PROPERTIES : String
          {static} ~ MAVEN_POM : String
          {static} ~ OSGI_BUNDLE : String
          {static} ~ PLUGIN_PROPERTIES : String
          {static} ~ SETTINGS_GRADLE : String
          {static} ~ SETTINGS_GRADLE_KTS : String
          {static} - ALL_DIRECTORIES : String
          {static} - BACK_SLASH : String
          {static} - BUNDLE_NAME : String
          {static} - BUNDLE_SYMBOLIC_NAME : String
          {static} - BUNDLE_VENDOR : String
          {static} - PATTERN : String
          {static} - PLUS : String
          {static} - REPLACEMENT_CHAR : String
          {static} - RE_GRADLE_SET_PROJECT_NAME : Pattern
          {static} - SLASH : String
          - fileNameToModuleName : Map<String, String>
          - prefixes : List<String>
          + ModuleDetector()
          + guessModuleName()
          - addMapping()
          - collectAntProjects()
          - collectGradleProjects()
          - collectMavenProjects()
          - collectOsgiProjects()
          - createFilesToModuleMapping()
          - find()
          - getLocalizedValue()
          - getSymbolicName()
          - normalizePath()
          - parseBuildXml()
          - parseGradle()
          - parseGradleSettings()
          - parseManifest()
          - parsePom()
          - parsePomAttribute()
          - readProperties()
          - readProperties()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      interface edu.hm.hafner.analysis.ModuleDetector.FileSystem {
          {abstract} + find()
          {abstract} + open()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.ModuleResolver {
          + run()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.PackageDetectors {
          {static} ~ UNDEFINED_PACKAGE : String
          - detectors : List<AbstractPackageDetector>
          + detectPackageName()
          ~ PackageDetectors()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.PackageDetectors.FileSystem {
          ~ openFile()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.PackageNameResolver {
          + PackageNameResolver()
          + run()
          ~ PackageNameResolver()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.ParsingCanceledException {
          {static} - serialVersionUID : long
          + ParsingCanceledException()
          + ParsingCanceledException()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.ParsingException {
          {static} - serialVersionUID : long
          + ParsingException()
          + ParsingException()
          + ParsingException()
          {static} - createMessage()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      abstract class edu.hm.hafner.analysis.ReaderFactory {
          {static} - ANSI_COLOR_CODES : Pattern
          {static} - IDENTITY : Function<String, String>
          {static} - REMOVE_COLOR_CODES : Function<String, String>
          - charset : Charset
          - lineMapper : Function<String, String>
          + ReaderFactory()
          + ReaderFactory()
          {abstract} + create()
          + getCharset()
          {abstract} + getFileName()
          + parse()
          + readDocument()
          + readStream()
          + readString()
          - closeReader()
          - hasLineMapper()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      abstract class edu.hm.hafner.analysis.RegexpLineParser {
          {static} - MAX_LINE_LENGTH : int
          {static} - serialVersionUID : long
          # RegexpLineParser()
          # createIssue()
          {abstract} # createIssue()
          # getCurrentLine()
          # isLineInteresting()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Report {
          {static} ~ DEFAULT_ID : String
          - duplicatesSize : int
          - elements : Set<Issue>
          - errorMessages : List<String>
          - fileNames : Set<String>
          - infoMessages : List<String>
          - namesByOrigin : Map<String, String>
          {static} - serialVersionUID : long
          + Report()
          + Report()
          + Report()
          + add()
          + addAll()
          + addAll()
          + addAll()
          + addFileName()
          + copy()
          + copyEmptyInstance()
          + equals()
          + filter()
          + findById()
          + findByProperty()
          + get()
          + getAbsolutePaths()
          + getCategories()
          + getDuplicatesSize()
          + getErrorMessages()
          + getFileNames()
          + getFiles()
          + getFolders()
          + getInfoMessages()
          + getModules()
          + getNameOfOrigin()
          + getPackages()
          + getProperties()
          + getPropertyCount()
          + getSeverities()
          + getSize()
          + getSizeOf()
          + getSizeOf()
          + getTools()
          + getTypes()
          + groupByProperty()
          + hasCategories()
          + hasErrors()
          + hasFiles()
          + hasFolders()
          + hasModules()
          + hasPackages()
          + hasSeverities()
          + hasTools()
          + hasTypes()
          + hashCode()
          + isEmpty()
          + isNotEmpty()
          + iterator()
          + logError()
          + logException()
          + logInfo()
          + print()
          + setNameOfOrigin()
          + size()
          + stream()
          + toString()
          # readResolve()
          ~ remove()
          - copyIssuesAndProperties()
          - copyProperties()
          - filterElements()
          - hasMeaningfulValues()
          - hasProperty()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Report.IssueFilterBuilder {
          - excludeFilters : Collection<Predicate<Issue>>
          - includeFilters : Collection<Predicate<Issue>>
          + build()
          + setExcludeCategoryFilter()
          + setExcludeCategoryFilter()
          + setExcludeFileNameFilter()
          + setExcludeFileNameFilter()
          + setExcludeMessageFilter()
          + setExcludeMessageFilter()
          + setExcludeModuleNameFilter()
          + setExcludeModuleNameFilter()
          + setExcludePackageNameFilter()
          + setExcludePackageNameFilter()
          + setExcludeTypeFilter()
          + setExcludeTypeFilter()
          + setIncludeCategoryFilter()
          + setIncludeCategoryFilter()
          + setIncludeFileNameFilter()
          + setIncludeFileNameFilter()
          + setIncludeMessageFilter()
          + setIncludeMessageFilter()
          + setIncludeModuleNameFilter()
          + setIncludeModuleNameFilter()
          + setIncludePackageNameFilter()
          + setIncludePackageNameFilter()
          + setIncludeTypeFilter()
          + setIncludeTypeFilter()
          - addMessageFilter()
          - addNewFilter()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      enum FilterType {
        EXCLUDE
        INCLUDE
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      interface edu.hm.hafner.analysis.Report.IssuePrinter {
          {abstract} + print()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Report.StandardOutputPrinter {
          - printStream : PrintStream
          + StandardOutputPrinter()
          + print()
          ~ StandardOutputPrinter()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.SecureDigester {
          + SecureDigester()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.SecureXmlParserFactory {
          {static} - DISABLED_PROPERTIES : String[]
          {static} - ENABLED_PROPERTIES : String[]
          + configureSaxParserFactory()
          + createDocumentBuilder()
          + createSaxParser()
          + createXmlStreamReader()
          + parse()
          + readDocument()
          - createInputSource()
      }
    }
  }
  

  namespace edu.hm.hafner {
    namespace analysis {
      class edu.hm.hafner.analysis.Severity {
          {static} + ERROR : Severity
          {static} + WARNING_HIGH : Severity
          {static} + WARNING_LOW : Severity
          {static} + WARNING_NORMAL : Severity
          {static} - ALL_SEVERITIES : ImmutableSet<Severity>
          - name : String
          {static} - serialVersionUID : long
          + Severity()
          {static} + collectSeveritiesFrom()
          + equals()
          + equalsIgnoreCase()
          + getName()
          {static} + getPredefinedValues()
          {static} + guessFromString()
          + hashCode()
          + toString()
          {static} + valueOf()
          {static} + valueOf()
      }
    }
  }
  

  edu.hm.hafner.analysis.AbstractPackageDetector o-- edu.hm.hafner.analysis.PackageDetectors.FileSystem : fileSystem
  edu.hm.hafner.analysis.CSharpNamespaceDetector -up-|> edu.hm.hafner.analysis.AbstractPackageDetector
  edu.hm.hafner.analysis.DuplicationGroup .up.|> java.io.Serializable
  edu.hm.hafner.analysis.FileReaderFactory -up-|> edu.hm.hafner.analysis.ReaderFactory
  edu.hm.hafner.analysis.FilteredLog o-- edu.hm.hafner.analysis.Report : delegate
  edu.hm.hafner.analysis.FullTextFingerprint o-- edu.hm.hafner.analysis.FullTextFingerprint.FileSystem : fileSystem
  edu.hm.hafner.analysis.FullTextFingerprint +-down- edu.hm.hafner.analysis.FullTextFingerprint.FileSystem
  edu.hm.hafner.analysis.Issue .up.|> java.io.Serializable
  edu.hm.hafner.analysis.Issue o-- edu.hm.hafner.analysis.LineRangeList : lineRanges
  edu.hm.hafner.analysis.Issue o-- edu.hm.hafner.analysis.Severity : severity
  edu.hm.hafner.analysis.IssueBuilder o-- edu.hm.hafner.analysis.LineRangeList : lineRanges
  edu.hm.hafner.analysis.IssueBuilder o-- edu.hm.hafner.analysis.Severity : severity
  edu.hm.hafner.analysis.IssueDifference o-- edu.hm.hafner.analysis.Report : fixedIssues
  edu.hm.hafner.analysis.IssueDifference o-- edu.hm.hafner.analysis.Report : newIssues
  edu.hm.hafner.analysis.IssueDifference o-- edu.hm.hafner.analysis.Report : outstandingIssues
  edu.hm.hafner.analysis.IssueParser .up.|> java.io.Serializable
  edu.hm.hafner.analysis.JavaPackageDetector -up-|> edu.hm.hafner.analysis.AbstractPackageDetector
  edu.hm.hafner.analysis.LineRange .up.|> java.io.Serializable
  edu.hm.hafner.analysis.LineRangeList .up.|> java.io.Serializable
  edu.hm.hafner.analysis.LineRangeList -up-|> java.util.AbstractList
  edu.hm.hafner.analysis.LineRangeList +-down- edu.hm.hafner.analysis.LineRangeList.Cursor
  edu.hm.hafner.analysis.LineRangeList.Cursor .up.|> java.util.ListIterator
  edu.hm.hafner.analysis.LookaheadParser -up-|> edu.hm.hafner.analysis.IssueParser
  edu.hm.hafner.analysis.ModuleDetector o-- edu.hm.hafner.analysis.ModuleDetector.FileSystem : factory
  edu.hm.hafner.analysis.ModuleDetector +-down- edu.hm.hafner.analysis.ModuleDetector.FileSystem
  edu.hm.hafner.analysis.PackageDetectors +-down- edu.hm.hafner.analysis.PackageDetectors.FileSystem
  edu.hm.hafner.analysis.PackageNameResolver o-- edu.hm.hafner.analysis.PackageDetectors : packageDetectors
  edu.hm.hafner.analysis.RegexpLineParser -up-|> edu.hm.hafner.analysis.LookaheadParser
  edu.hm.hafner.analysis.RegexpLineParser o-- edu.hm.hafner.util.LookaheadStream : temporaryLookahead
  edu.hm.hafner.analysis.Report .up.|> java.io.Serializable
  edu.hm.hafner.analysis.Report .up.|> java.lang.Iterable
  edu.hm.hafner.analysis.Report +-down- edu.hm.hafner.analysis.Report.IssueFilterBuilder
  edu.hm.hafner.analysis.Report +-down- edu.hm.hafner.analysis.Report.IssuePrinter
  edu.hm.hafner.analysis.Report +-down- edu.hm.hafner.analysis.Report.StandardOutputPrinter
  edu.hm.hafner.analysis.Report.IssueFilterBuilder +-down- edu.hm.hafner.analysis.Report.IssueFilterBuilder.FilterType
  edu.hm.hafner.analysis.Report.StandardOutputPrinter .up.|> edu.hm.hafner.analysis.Report.IssuePrinter
  edu.hm.hafner.analysis.SecureDigester -up-|> org.apache.commons.digester3.Digester
  edu.hm.hafner.analysis.Severity .up.|> java.io.Serializable


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
